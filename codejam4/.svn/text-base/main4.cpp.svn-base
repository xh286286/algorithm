//#include "LongInt.h"
#include <QtCore/QCoreApplication>
#include <iostream>
#include <cstdlib>
#include <iomanip>
#include <algorithm>
#include <fstream>
#include <string>
#include <list>
#include <vector>
#include <cassert>
#include <cmath>
using namespace std;
ifstream fin; 
ofstream fout;

void preWork();
void work();

int main(int argc, char *argv[])
{
	//preWork();
	QCoreApplication a(argc, argv);

	//char * inputName="A-large.in";
	//fin.open(inputName);
	//	fin.open ( "A-small-practice.in");
	//fin.open ( "A-large-practice.in");
	fin.open("NO4_input.txt");

	fout.open("output.txt");
	int n;
	fin >>n;
	for (int i=0; i<n; i++)
	{
		fout<<"Case #"<<i+1<<": ";
		work();
		fout<<endl;
	}


	fin.close();

	fout.close();



	//	return a.exec();
}



void preWork()
{


}
void stringtoInt64(const string & s, __int64 & a);
void int64toString( __int64 a, string & s);




void work()
{
	char s[200];
	int L,  N ,C;
	__int64 t;
	int a[2000];
	fin>> L>>s>>N>>C;
	stringtoInt64(s,t);
	for (int i=0; i<C; i++)
	{
		fin>>a[i];
	}
	int * z;
	z= new int[ 1000000];
	//z.resize(N+10);

	__int64 total;
	total=0;
	for (int i=0; i<N; i++)
	{
		total+= a[ i%C];
	}
	__int64 temp;
	temp=0;
	int k;
	k= N;
	for (int i=0; i<N; i++)
	{
		temp+=a[i%C]*2;
		if (temp  >= t)
		{
			k=i+1;
			z[0] = int(temp-t);
			break;
		}
	}
	for (int i=k; i<N; i++)
	{
		z[i-k+1] = a[i%C]*2;
	}
	int size;
	size= N-k+1;
	sort(z, z+size,greater<int>());

	__int64 reduce;
	reduce=0;
	for (int i=0;  i<size && i<L; i++)
	{
		reduce+= z[i];
	}

	__int64 result;
	result= total*2- reduce/2;
	{
		string s;
		int64toString(result, s);
		fout<<s;

	}
	delete []z;
}




__int64 gy(__int64 a, __int64 b)
{
	while (b!=0)
	{
		__int64 c;
		c= a%b;
		a=b;
		b=c;
	}
	return a;
}


void stringtoInt64(const string & s, __int64 & a)
{
	int sign;
	if (s[0]=='-')
	{
		sign=-1;
	}
	else
	{
		sign= 1;
	}
	a=0;
	for (int i=0; i< s.size(); i++)
	{
		if (s[i]=='-' || s[i]== '+') continue;
		a= a*10+ s[i]-'0';
	}
	a*= sign;
}
void int64toString( __int64 a, string & s)
{

	s="";
	if (a==0) 
	{
		s+='0';
		return;
	}
	int sign;
	if (a<0) 
	{
		sign= -1;
		a=-a;
	}
	else
	{
		sign=1;
	}
	while (a>0)
	{
		int z;
		z= a%10;
		s+= '0'+z;
		a= a/10;
	}
	if (sign<0) s+= '-';

	string n;
	n="";
	for (int i= s.size()-1; i>=0 ; i--)
	{
		n+= s[i];
	}
	s=n;
}