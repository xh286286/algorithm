//#include "LongInt.h"
#include <QtCore/QCoreApplication>
#include <iostream>
#include <cstdlib>
#include <iomanip>
#include <algorithm>
#include <fstream>
#include <string>
#include <list>
#include <vector>
#include <cassert>
#include <cmath>
#include <ctime>
using namespace std;
ifstream fin; 
ofstream fout;

//  越界 问题  浮点 除 变 整除，  abs 问题


void preWork();
void work();
void work1();
int sorttime;
int main(int argc, char *argv[])
{
	//preWork();
	QCoreApplication a(argc, argv);

	//	char * inputName="A-large.in";
	//	fin.open(inputName);
	//	fin.open ( "A-small-practice.in");
	//fin.open ( "A-large-practice.in");
	fin.open ( "NO2_input.txt");

	int now =clock();
	sorttime=0;
	fout.open("output.txt");
	int n;
	fin >>n;
	for (int i=0; i<n; i++)
	{
		fout<<"Case #"<<i+1<<": ";
		work();
		fout<<endl;
	}


	fin.close();

	fout.close();
	int now2= clock();
	
	cout<<now<<endl<<now2<<endl<< now2-now<<endl;
	cout<<sorttime<<endl;

	//	return a.exec();
}


void preWork()
{


}

struct Node
{
	string s;
	int dic[200];
	int sa[ 30];
	int lose;
	int order;
	void setDic()
	{
		for (char c= 'a'; c<='z'; c++)
		{
			int a;
			a=0;
			for (int i=0; i<s.size(); i++)
			{
				int k;
				if (s[i]==c) k=1; else k=0;
				a= a*2+k;
			}
			dic[c]=a;
		}
	}
	void setSaByL(const string & z)
	{
		lose=0;
		sa[0]= s.size();
		for (int i=0; i<z.size(); i++)
		{
			sa[i+1]= dic[ z[i] ];
		}
	}
	bool operator < ( const Node& b) const 
	{
		for (int i=0; i<27; i++)
		{
			if (sa[i]< b.sa[i]) return true;
			if (sa[i]> b.sa[i]) return false;
		}
		return false;
	}
};
bool Compare1(const Node  * const & a, const Node *const  &  b )
{
	if ( *a<*b) return true;
	return false;
}
void work()
{
	int n,m;
	fin>>n>>m;
	Node * d;
	d= new Node[ n+100];
	Node * dp[ 10010];
	for (int i=0; i< n; i++)
	{
		
		fin>> d[i].s;
		d[i].setDic();
		d[i].order = i;
		dp[i] =d+i;
	}
	while (m>0)
	{
		m--;
		string l;
		fin>>l;
		for (int j=0; j<n; j++)
		{
			d[j].setSaByL(l);
		}
		int t1= clock();
		sort(dp, dp+n,Compare1);
		t1= clock() -t1;
		sorttime += t1;
		vector< int > loop,loop1;

		loop.push_back(0);
		loop.push_back(n);
		for (int i=0; i<26; i++)
		{
			loop1.clear();
			for (int j=0; j<loop.size()-1; j++)
			{
				int a,b;
				a= loop[j];
				b= loop[j+1];
				if (a>=b) continue;
				if (a+1>=b)
				{
					loop1.push_back(a);
					continue;
				}
				if (dp[b-1]->sa[i]!=0 && dp[a]->sa[i]==0)
				{
					for (int k=a; k<b; k++)
					{
						if (dp[k]->sa[i]!=0) break;
						dp[k]->lose++;
					}
				}
				int last;
				last =-1;
				for (int k=a; k<b; k++)
				{
					if (dp[k]->sa[i]!=last) 
					{
						loop1.push_back(k);
						last= dp[k]->sa[i];
					}
				}
			}
			loop1.push_back(n);
			loop = loop1;
		}

		int maxlose;
		maxlose=-1;
		string result;
		for (int i=0; i<n; i++)
		{
			if (d[i].lose>maxlose )
			{
				maxlose= d[i].lose;
				result= d[i].s;
			}
		}
		fout<<result<<' ';

	}


	delete []d;
}

